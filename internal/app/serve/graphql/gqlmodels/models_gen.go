// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Competition struct {
	ID       string    `json:"id"`
	Name     string    `json:"name"`
	StartAt  time.Time `json:"startAt"`
	FinishAt time.Time `json:"finishAt"`
	Users    []*User   `json:"users"`
}

type RaffleTicketLog struct {
	ID         string     `json:"id"`
	RaffleID   string     `json:"raffleID"`
	UserID     string     `json:"userID"`
	Code       string     `json:"code"`
	ActionType ActionType `json:"actionType"`
	Content    string     `json:"content"`
}

type RaffleTicketStat struct {
	Available int `json:"available"`
	Sold      int `json:"sold"`
}

type User struct {
	ID             string             `json:"id"`
	Username       string             `json:"username"`
	DisplayName    string             `json:"displayName"`
	MembershipType MembershipType     `json:"membershipType"`
	Status         UserStatus         `json:"status"`
	CreatedAt      time.Time          `json:"createdAt"`
	UpdatedAt      time.Time          `json:"updatedAt"`
	Races          int                `json:"races"`
	Points         int                `json:"points"`
	RaffleTickets  []*RaffleTicketLog `json:"raffleTickets"`
}

type ActionType string

const (
	ActionTypeGive   ActionType = "GIVE"
	ActionTypeRevoke ActionType = "REVOKE"
)

var AllActionType = []ActionType{
	ActionTypeGive,
	ActionTypeRevoke,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeGive, ActionTypeRevoke:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MembershipType string

const (
	MembershipTypeBasic MembershipType = "BASIC"
	MembershipTypeGold  MembershipType = "GOLD"
)

var AllMembershipType = []MembershipType{
	MembershipTypeBasic,
	MembershipTypeGold,
}

func (e MembershipType) IsValid() bool {
	switch e {
	case MembershipTypeBasic, MembershipTypeGold:
		return true
	}
	return false
}

func (e MembershipType) String() string {
	return string(e)
}

func (e *MembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MembershipType", str)
	}
	return nil
}

func (e MembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusNew    UserStatus = "NEW"
	UserStatusActive UserStatus = "ACTIVE"
	UserStatusLeft   UserStatus = "LEFT"
)

var AllUserStatus = []UserStatus{
	UserStatusNew,
	UserStatusActive,
	UserStatusLeft,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusNew, UserStatusActive, UserStatusLeft:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
